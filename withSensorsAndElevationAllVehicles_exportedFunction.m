function [allData, scenario, sensors] = withSensorsAndElevationAllVehicles()
%withSensorsAndElevationAllVehicles - Returns sensor detections
%    allData = withSensorsAndElevationAllVehicles returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = withSensorsAndElevationAllVehicles optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.5 and Automated Driving System Toolbox 1.3.
% Generated on: 30-Oct-2018 00:09:15

% Create the drivingScenario object and ego car
[scenario, egoCar] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego car
    poses = targetPoses(egoCar);
    % Generate the boundaries of all lanes relative to the ego car for 100m
    lanes = laneBoundaries(egoCar, 'XDistance', 100);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    isValidTime      = false(1, numSensors);
    isValidLaneTime  = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        type = getDetectorOutput(sensors{sensorIndex});
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensors{sensorIndex}(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensors{sensorIndex}(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensors{sensorIndex}(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensors{sensorIndex}(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        end
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections',   {laneDetections}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm



%MY CREATED SENSORS

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = radarDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 49, ...
    'MaxRange', 50, ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
sensors{3} = radarDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -49, ...
    'MaxRange', 50, ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
sensors{4} = radarDetectionGenerator('SensorIndex', 4, ...
    'SensorLocation', [1.16 -0.51], ...
    'Yaw', -131.139267375117, ...
    'MaxRange', 50, ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
sensors{5} = radarDetectionGenerator('SensorIndex', 5, ...
    'SensorLocation', [1.56 0], ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
sensors{6} = visionDetectionGenerator('SensorIndex', 6, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{7} = radarDetectionGenerator('SensorIndex', 7, ...
    'SensorLocation', [0 0], ...
    'Yaw', -180, ...
    'ActorProfiles', profiles);
sensors{8} = radarDetectionGenerator('SensorIndex', 8, ...
    'SensorLocation', [1.2 0.42], ...
    'Yaw', 131.139267375117, ...
    'MaxRange', 50, ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
numSensors = 8;


%MY CREATED ROAD AND VEHICLES

function [scenario, egoCar] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [54.7 42.01 0;
    99.8 42 0];
marking = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Solid')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification);

roadCenters = [98 48.8 0;
    102.7 80.2 0;
    118.5 93.7 8;
    154 81.4 0;
    149.3 37.1 8;
    123.1 4.2 0;
    100.7 35.9 0;
    98 48.8 0];
marking = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Solid')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification);

roadCenters = [148.6 -21.2 0;
    121.4 91.9 0;
    59.5 82.5 0;
    57.9 39.7 0];
marking = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('Solid')];
laneSpecification = lanespec(4, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification);

roadCenters = [153.6 81.9 0;
    198 92 0;
    215.3 86.6 0];
marking = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
    laneMarking('Unmarked')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification);

% Add the ego car
egoCar = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [153.8 -19.1 0]);
waypoints = [153.1 -18.32 0;
    154.9 -4.42 0;
    156.9 11.98 0;
    155.4 39.18 0;
    147.11 67.7 0.01;
    144.2 72.68 0;
    133.1 87.8 0;
    130.1 91.58 0;
    117.1 100.3 0;
    104.4 104.2 0;
    93.2 107.18 0;
    83.6 104.9 0;
    74.5 101.5 0;
    66 97.2 0;
    58 88.7 0;
    51.2 73.9 0;
    50 59.3 0;
    50.4 48.58 0;
    55.6 41.6 0;
    62.8 40.2 0;
    79.3 40.6 0;
    98 37.6 0;
    99.4 32.38 0;
    102 22.48 0;
    105.6 13.88 0;
    113.6 5.98 0;
    123.1 3.18000000000001 0;
    129.1 3.88 0.4;
    134.6 6.48 1.3;
    141 11.88 3.1;
    144.2 18.48 4.8;
    151.3 38.3 8;
    159.2 63.68 2.8;
    157.2 78.38 0.2;
    156.8 81.78 0.1;
    160.8 83.98 0];
speed = 25;
trajectory(egoCar, waypoints, speed);

% Add the non-ego actors
truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [208.21 91.17 0.01]);
waypoints = [208.21 91.17 0.01;
    201.16 93.33 0.01;
    187.56 94.56 0.01;
    171.79 90.26 0.01;
    157.42 85.91 0.08;
    154.64 84.31 0.11;
    149.19 90.22 1.18;
    142.9 95.1 3.2;
    136.5 97.12 4.92;
    128.2 97.6 6.9;
    115.2 94.6 7.6;
    102.9 83.9 0.4;
    96 68.8 0;
    96.3 55.2 0;
    96.3 45.3 0;
    79 44.5 0;
    59.9 44.4 0;
    58.5 55 0;
    57.6 69.7 0;
    68.5 88.7 0;
    85.8 96.9 0;
    103.4 96.1 0;
    124.4 87.6 0;
    130.4 77.6 0;
    142 58.7 0;
    145.3 43.8 0;
    149.4 9.4 0;
    144.5 -14.2 0];
speed = 16;
trajectory(truck, waypoints, speed);

car = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [57 62.8 0]);
waypoints = [56.7 64.4 0;
    61.3 77.7 0;
    71.2 91 0;
    90.2 100.8 0;
    108.7 95.6 0;
    123.9 86.1 0;
    141.8 67.1 0;
    148.6 50.6 0;
    147.2 59.8 0;
    135.3 84.1 0;
    112.2 102 0;
    89.1 104.9 0;
    63.3 94.9 0;
    52.1 57.7 0;
    63.8 44.7 0;
    101.5 41.2 0;
    108.5 17.3 0;
    117.9 8.1 0;
    129.9 7.8 0.6;
    139.9 17.8 3.7;
    147.7 36.2 8;
    156.9 58.9 4.3;
    154.1 73.4 1;
    153.06 81.08 0.09;
    171.7 89.37 0.01];
speed = 38;
trajectory(car, waypoints, speed);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
else
    output = 'Objects only';
end

