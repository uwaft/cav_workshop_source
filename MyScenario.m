function [allData, scenario, sensors] = MyScenario()
%MyScenario - Returns sensor detections
%    allData = MyScenario returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = MyScenario optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.5 and Automated Driving System Toolbox 1.3.
% Generated on: 14-Nov-2018 12:16:01

% Create the drivingScenario object and ego car
[scenario, egoCar] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego car
    poses = targetPoses(egoCar);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    isValidTime      = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        [objectDets, numObjects, isValidTime(sensorIndex)] = sensors{sensorIndex}(poses, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections',   {laneDetections}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = radarDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 100, ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [1.9 0], ...
    'Yaw', 0.872457122902033, ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{4} = visionDetectionGenerator('SensorIndex', 4, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{5} = visionDetectionGenerator('SensorIndex', 5, ...
    'SensorLocation', [0 0.9], ...
    'Yaw', 90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{6} = visionDetectionGenerator('SensorIndex', 6, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1814.81018227767 1814.81018227767],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{7} = visionDetectionGenerator('SensorIndex', 7, ...
    'SensorLocation', [0 -0.9], ...
    'Yaw', -90, ...
    'MaxRange', 50, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{8} = visionDetectionGenerator('SensorIndex', 8, ...
    'SensorLocation', [0.17 0.005], ...
    'Yaw', 180, ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);
sensors{9} = radarDetectionGenerator('SensorIndex', 9, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 135, ...
    'MaxRange', 50, ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
sensors{10} = radarDetectionGenerator('SensorIndex', 10, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -135, ...
    'MaxRange', 50, ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
sensors{11} = radarDetectionGenerator('SensorIndex', 11, ...
    'SensorLocation', [0.86 0], ...
    'Yaw', -180, ...
    'ActorProfiles', profiles);
sensors{12} = radarDetectionGenerator('SensorIndex', 12, ...
    'SensorLocation', [0.97 0.01], ...
    'ActorProfiles', profiles);
sensors{13} = radarDetectionGenerator('SensorIndex', 13, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 45, ...
    'MaxRange', 50, ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
sensors{14} = radarDetectionGenerator('SensorIndex', 14, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -44.2838400545296, ...
    'MaxRange', 50, ...
    'FieldOfView', [90 5], ...
    'ActorProfiles', profiles);
numSensors = 14;

function [scenario, egoCar] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [9.7 3.1 0;
    19.3 -17.7 0;
    30.4 3.4 0;
    21.3 20.9 0;
    9.7 3.1 0];
bankAngle = 10;
laneSpecification = lanespec(2, 'Width', 3.925);
road(scenario, roadCenters, bankAngle, 'Lanes', laneSpecification);

% Add the ego car
egoCar = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [12 1.6 -0.4]);
waypoints = [12 1.6 -0.4;
    12.9 11.7 -0.3;
    16.7 17.5 -0.3;
    22.1 18.9 -0.3;
    26.9 16 -0.2;
    28.5 7.9 -0.3;
    28.7 -4.5 -0.3;
    25.4 -12.9 -0.3;
    20.2 -15.9 -0.3;
    14.2 -13.3 -0.3;
    11.9 -8 -0.3;
    11.9 -0.3 -0.4;
    11.4 3.1 -0.3];
speed = 30;
trajectory(egoCar, waypoints, speed);

% Add the non-ego actors
car = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [12.1 -9.4 -0.3]);
waypoints = [12.1 -9.4 -0.3;
    16.1 -14.4 -0.4;
    20.6 -18.9 0.2;
    26.3 -16.6 0.2;
    31.2 -12.2 0.4;
    33 -4.6 0.4;
    32.8 4.7 0.4;
    31.8 12.8 0.4;
    30 17.3 0.4;
    27 21.1 0.4;
    23 22.5 0.3;
    17.7 21.9 0.2;
    13.6 20.4 0.3;
    10.8 16.9 0.3;
    8.1 8.5 0.3;
    7.3 1.1 0.4;
    8 -7.6 0.3;
    10.6 -14.4 0.3;
    15.2 -17.9 0.2;
    20.3 -18.8 0.2];
speed = 30;
trajectory(car, waypoints, speed);

